name: Test STkrbKeytab
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell modules
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

      - name: Run Pester tests
        run: |
          Import-Module Pester
          $config = New-PesterConfiguration
          $config.Run.Path = "tests"
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = "TestResults.xml"
          $config.Output.Verbosity = 'Detailed'
          Invoke-Pester -Configuration $config

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults.xml

      - name: Run PSScriptAnalyzer
        run: |
          Write-Host "=== PSScriptAnalyzer Analysis ===" -ForegroundColor Cyan

          $allIssues = @()
          $folders = @(
            @{ Path = "Public"; Name = "Public Functions" },
            @{ Path = "Private"; Name = "Private Functions" },
            @{ Path = "tests"; Name = "Test Files" },
            @{ Path = "STkrbKeytab.psm1"; Name = "Module Manifest" },
            @{ Path = "STkrbKeytab.psd1"; Name = "Module Data" }
          )

          foreach ($folder in $folders) {
            if (Test-Path $folder.Path) {
              Write-Host "`n--- Analyzing $($folder.Name) ---" -ForegroundColor Yellow
              $results = Invoke-ScriptAnalyzer -Path $folder.Path -Recurse -Severity Warning

              if ($results) {
                Write-Host "Found $($results.Count) issue(s):" -ForegroundColor Red
                $results | Format-Table -Property Severity, RuleName, ScriptName, Line, Message -AutoSize
                $allIssues += $results
              } else {
                Write-Host "✓ No issues found" -ForegroundColor Green
              }
            } else {
              Write-Host "⚠ Path not found: $($folder.Path)" -ForegroundColor DarkYellow
            }
          }

          Write-Host "`n=== Summary ===" -ForegroundColor Cyan
          if ($allIssues.Count -gt 0) {
            Write-Host "Total issues found: $($allIssues.Count)" -ForegroundColor Red

            # Group by severity
            $bySeverity = $allIssues | Group-Object Severity
            foreach ($group in $bySeverity) {
              Write-Host "  $($group.Name): $($group.Count)" -ForegroundColor Yellow
            }

            # Group by rule
            Write-Host "`nTop issues by rule:" -ForegroundColor Yellow
            $byRule = $allIssues | Group-Object RuleName | Sort-Object Count -Descending | Select-Object -First 5
            foreach ($rule in $byRule) {
              Write-Host "  $($rule.Name): $($rule.Count)" -ForegroundColor White
            }

            Write-Error "PSScriptAnalyzer found $($allIssues.Count) total issues"
          } else {
            Write-Host "✓ All scans completed successfully - no issues found!" -ForegroundColor Green
          }
