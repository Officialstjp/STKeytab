name: Sign & Test STkrbKeytab
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell modules
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

      - name: Run Pester tests
        run: |
          Import-Module Pester
          $config = New-PesterConfiguration
          $config.Run.Path = "tests"
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputFormat = "NUnitXml"
          $config.TestResult.OutputPath = "TestResults.xml"
          $config.Output.Verbosity = 'Detailed'
          Invoke-Pester -Configuration $config

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults.xml

      - name: Run PSScriptAnalyzer
        run: |
          .\CI\Run-PSScriptAnalyzer.ps1

  sign-module:
    name: Sign Module
    runs-on: windows-latest
    needs: test
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import signing certificate
        env:
          SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
          SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERT_PASSWORD }}
        run: |
          if (-not $env:SIGNING_CERTIFICATE) {
              Write-Warning "[~] No signing certificate provided. Module will be unsigned."
              Add-Content -Path $env:GITHUB_ENV -Value "SKIP_SIGNING=true"
              exit 0
          }

          $thumb = .\CI\Import-SigningCert.ps1 -SIGNING_CERTIFICATE $SIGNING_CERTIFICATE -SIGNING_CERT_PASSWORD $SIGNING_CERT_PASSWORD
          # Store thumbprint for signing step
          Add-Content -Path $env:GITHUB_ENV -Value "CERT_THUMBPRINT=$thumb"

      - name: Sign PowerShell files
        if: env.SKIP_SIGNING != 'true'
        run: |
          .\CI\Sign-Module.ps1  -CertificateThumbprint $env:CERT_THUMBPRINT -Verify

          # Verify all files are signed
          $psFiles = Get-ChildItem -Recurse -Include "*.ps1", "*.psm1", "*.psd1" | Where-Object {
            $_.FullName -notmatch '\\tests\\' -and $_.FullName -notmatch '\\temp\\' -and $_.Name -ne 'Sign-Module.ps1'
          }

          $unsigned = $psFiles | Where-Object {
            $sig = Get-AuthenticodeSignature -FilePath $_.FullName
            $sig.Status -ne 'Valid'
          }

          if ($unsigned) {
            Write-Error "[!] Found unsigned files: $($unsigned.Name -join ', ')"
          } else {
            Write-Host "[+] All $($psFiles.Count) PowerShell files are properly signed" -ForegroundColor Green
          }

      - name: Test signed module
        if: env.SKIP_SIGNING != 'true'
        shell: pwsh
        run: |
          # Quick smoke test of signed module
          Import-Module .\STkrbKeytab.psd1 -Force
          $commands = Get-Command -Module STkrbKeytab
          Write-Host "[+] Signed module loaded successfully with $($commands.Count) commands" -ForegroundColor Green
